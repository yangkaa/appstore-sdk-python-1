# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: huangrh@goodrain.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1AppImageHubInfoResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hub_password': 'str',
        'hub_url': 'str',
        'hub_user': 'str',
        'is_trust': 'bool',
        'namespace': 'str'
    }

    attribute_map = {
        'hub_password': 'hubPassword',
        'hub_url': 'hubURL',
        'hub_user': 'hubUser',
        'is_trust': 'isTrust',
        'namespace': 'namespace'
    }

    def __init__(self, hub_password=None, hub_url=None, hub_user=None, is_trust=None, namespace=None, local_vars_configuration=None):  # noqa: E501
        """V1AppImageHubInfoResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hub_password = None
        self._hub_url = None
        self._hub_user = None
        self._is_trust = None
        self._namespace = None
        self.discriminator = None

        self.hub_password = hub_password
        self.hub_url = hub_url
        self.hub_user = hub_user
        self.is_trust = is_trust
        self.namespace = namespace

    @property
    def hub_password(self):
        """Gets the hub_password of this V1AppImageHubInfoResponse.  # noqa: E501


        :return: The hub_password of this V1AppImageHubInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._hub_password

    @hub_password.setter
    def hub_password(self, hub_password):
        """Sets the hub_password of this V1AppImageHubInfoResponse.


        :param hub_password: The hub_password of this V1AppImageHubInfoResponse.  # noqa: E501
        :type hub_password: str
        """
        if self.local_vars_configuration.client_side_validation and hub_password is None:  # noqa: E501
            raise ValueError("Invalid value for `hub_password`, must not be `None`")  # noqa: E501

        self._hub_password = hub_password

    @property
    def hub_url(self):
        """Gets the hub_url of this V1AppImageHubInfoResponse.  # noqa: E501


        :return: The hub_url of this V1AppImageHubInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._hub_url

    @hub_url.setter
    def hub_url(self, hub_url):
        """Sets the hub_url of this V1AppImageHubInfoResponse.


        :param hub_url: The hub_url of this V1AppImageHubInfoResponse.  # noqa: E501
        :type hub_url: str
        """
        if self.local_vars_configuration.client_side_validation and hub_url is None:  # noqa: E501
            raise ValueError("Invalid value for `hub_url`, must not be `None`")  # noqa: E501

        self._hub_url = hub_url

    @property
    def hub_user(self):
        """Gets the hub_user of this V1AppImageHubInfoResponse.  # noqa: E501


        :return: The hub_user of this V1AppImageHubInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._hub_user

    @hub_user.setter
    def hub_user(self, hub_user):
        """Sets the hub_user of this V1AppImageHubInfoResponse.


        :param hub_user: The hub_user of this V1AppImageHubInfoResponse.  # noqa: E501
        :type hub_user: str
        """
        if self.local_vars_configuration.client_side_validation and hub_user is None:  # noqa: E501
            raise ValueError("Invalid value for `hub_user`, must not be `None`")  # noqa: E501

        self._hub_user = hub_user

    @property
    def is_trust(self):
        """Gets the is_trust of this V1AppImageHubInfoResponse.  # noqa: E501


        :return: The is_trust of this V1AppImageHubInfoResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_trust

    @is_trust.setter
    def is_trust(self, is_trust):
        """Sets the is_trust of this V1AppImageHubInfoResponse.


        :param is_trust: The is_trust of this V1AppImageHubInfoResponse.  # noqa: E501
        :type is_trust: bool
        """
        if self.local_vars_configuration.client_side_validation and is_trust is None:  # noqa: E501
            raise ValueError("Invalid value for `is_trust`, must not be `None`")  # noqa: E501

        self._is_trust = is_trust

    @property
    def namespace(self):
        """Gets the namespace of this V1AppImageHubInfoResponse.  # noqa: E501


        :return: The namespace of this V1AppImageHubInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V1AppImageHubInfoResponse.


        :param namespace: The namespace of this V1AppImageHubInfoResponse.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AppImageHubInfoResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1AppImageHubInfoResponse):
            return True

        return self.to_dict() != other.to_dict()
