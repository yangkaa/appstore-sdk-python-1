# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: huangrh@goodrain.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1AppVersionDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_key_id': 'str',
        'app_name': 'str',
        'create_time': 'datetime',
        'delivery_mode': 'str',
        'description': 'str',
        'enable': 'bool',
        'market_id': 'str',
        'rainbond_version': 'str',
        'template': 'str',
        'template_type': 'str',
        'update_time': 'datetime',
        'update_version': 'int',
        'version': 'str',
        'version_alias': 'str'
    }

    attribute_map = {
        'app_key_id': 'appKeyID',
        'app_name': 'appName',
        'create_time': 'createTime',
        'delivery_mode': 'deliveryMode',
        'description': 'description',
        'enable': 'enable',
        'market_id': 'marketID',
        'rainbond_version': 'rainbondVersion',
        'template': 'template',
        'template_type': 'templateType',
        'update_time': 'updateTime',
        'update_version': 'updateVersion',
        'version': 'version',
        'version_alias': 'versionAlias'
    }

    def __init__(self, app_key_id=None, app_name=None, create_time=None, delivery_mode=None, description=None, enable=None, market_id=None, rainbond_version=None, template=None, template_type=None, update_time=None, update_version=None, version=None, version_alias=None, local_vars_configuration=None):  # noqa: E501
        """V1AppVersionDetailResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_key_id = None
        self._app_name = None
        self._create_time = None
        self._delivery_mode = None
        self._description = None
        self._enable = None
        self._market_id = None
        self._rainbond_version = None
        self._template = None
        self._template_type = None
        self._update_time = None
        self._update_version = None
        self._version = None
        self._version_alias = None
        self.discriminator = None

        self.app_key_id = app_key_id
        self.app_name = app_name
        self.create_time = create_time
        self.delivery_mode = delivery_mode
        self.description = description
        self.enable = enable
        self.market_id = market_id
        self.rainbond_version = rainbond_version
        self.template = template
        self.template_type = template_type
        self.update_time = update_time
        self.update_version = update_version
        self.version = version
        self.version_alias = version_alias

    @property
    def app_key_id(self):
        """Gets the app_key_id of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The app_key_id of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_key_id

    @app_key_id.setter
    def app_key_id(self, app_key_id):
        """Sets the app_key_id of this V1AppVersionDetailResponse.


        :param app_key_id: The app_key_id of this V1AppVersionDetailResponse.  # noqa: E501
        :type app_key_id: str
        """
        if self.local_vars_configuration.client_side_validation and app_key_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_key_id`, must not be `None`")  # noqa: E501

        self._app_key_id = app_key_id

    @property
    def app_name(self):
        """Gets the app_name of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The app_name of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this V1AppVersionDetailResponse.


        :param app_name: The app_name of this V1AppVersionDetailResponse.  # noqa: E501
        :type app_name: str
        """
        if self.local_vars_configuration.client_side_validation and app_name is None:  # noqa: E501
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def create_time(self):
        """Gets the create_time of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The create_time of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1AppVersionDetailResponse.


        :param create_time: The create_time of this V1AppVersionDetailResponse.  # noqa: E501
        :type create_time: datetime
        """
        if self.local_vars_configuration.client_side_validation and create_time is None:  # noqa: E501
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def delivery_mode(self):
        """Gets the delivery_mode of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The delivery_mode of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._delivery_mode

    @delivery_mode.setter
    def delivery_mode(self, delivery_mode):
        """Sets the delivery_mode of this V1AppVersionDetailResponse.


        :param delivery_mode: The delivery_mode of this V1AppVersionDetailResponse.  # noqa: E501
        :type delivery_mode: str
        """
        if self.local_vars_configuration.client_side_validation and delivery_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery_mode`, must not be `None`")  # noqa: E501

        self._delivery_mode = delivery_mode

    @property
    def description(self):
        """Gets the description of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The description of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1AppVersionDetailResponse.


        :param description: The description of this V1AppVersionDetailResponse.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def enable(self):
        """Gets the enable of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The enable of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this V1AppVersionDetailResponse.


        :param enable: The enable of this V1AppVersionDetailResponse.  # noqa: E501
        :type enable: bool
        """
        if self.local_vars_configuration.client_side_validation and enable is None:  # noqa: E501
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def market_id(self):
        """Gets the market_id of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The market_id of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._market_id

    @market_id.setter
    def market_id(self, market_id):
        """Sets the market_id of this V1AppVersionDetailResponse.


        :param market_id: The market_id of this V1AppVersionDetailResponse.  # noqa: E501
        :type market_id: str
        """
        if self.local_vars_configuration.client_side_validation and market_id is None:  # noqa: E501
            raise ValueError("Invalid value for `market_id`, must not be `None`")  # noqa: E501

        self._market_id = market_id

    @property
    def rainbond_version(self):
        """Gets the rainbond_version of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The rainbond_version of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._rainbond_version

    @rainbond_version.setter
    def rainbond_version(self, rainbond_version):
        """Sets the rainbond_version of this V1AppVersionDetailResponse.


        :param rainbond_version: The rainbond_version of this V1AppVersionDetailResponse.  # noqa: E501
        :type rainbond_version: str
        """
        if self.local_vars_configuration.client_side_validation and rainbond_version is None:  # noqa: E501
            raise ValueError("Invalid value for `rainbond_version`, must not be `None`")  # noqa: E501

        self._rainbond_version = rainbond_version

    @property
    def template(self):
        """Gets the template of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The template of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1AppVersionDetailResponse.


        :param template: The template of this V1AppVersionDetailResponse.  # noqa: E501
        :type template: str
        """
        if self.local_vars_configuration.client_side_validation and template is None:  # noqa: E501
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def template_type(self):
        """Gets the template_type of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The template_type of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this V1AppVersionDetailResponse.


        :param template_type: The template_type of this V1AppVersionDetailResponse.  # noqa: E501
        :type template_type: str
        """
        if self.local_vars_configuration.client_side_validation and template_type is None:  # noqa: E501
            raise ValueError("Invalid value for `template_type`, must not be `None`")  # noqa: E501

        self._template_type = template_type

    @property
    def update_time(self):
        """Gets the update_time of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The update_time of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V1AppVersionDetailResponse.


        :param update_time: The update_time of this V1AppVersionDetailResponse.  # noqa: E501
        :type update_time: datetime
        """
        if self.local_vars_configuration.client_side_validation and update_time is None:  # noqa: E501
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def update_version(self):
        """Gets the update_version of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The update_version of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._update_version

    @update_version.setter
    def update_version(self, update_version):
        """Sets the update_version of this V1AppVersionDetailResponse.


        :param update_version: The update_version of this V1AppVersionDetailResponse.  # noqa: E501
        :type update_version: int
        """
        if self.local_vars_configuration.client_side_validation and update_version is None:  # noqa: E501
            raise ValueError("Invalid value for `update_version`, must not be `None`")  # noqa: E501

        self._update_version = update_version

    @property
    def version(self):
        """Gets the version of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The version of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1AppVersionDetailResponse.


        :param version: The version of this V1AppVersionDetailResponse.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def version_alias(self):
        """Gets the version_alias of this V1AppVersionDetailResponse.  # noqa: E501


        :return: The version_alias of this V1AppVersionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._version_alias

    @version_alias.setter
    def version_alias(self, version_alias):
        """Sets the version_alias of this V1AppVersionDetailResponse.


        :param version_alias: The version_alias of this V1AppVersionDetailResponse.  # noqa: E501
        :type version_alias: str
        """
        if self.local_vars_configuration.client_side_validation and version_alias is None:  # noqa: E501
            raise ValueError("Invalid value for `version_alias`, must not be `None`")  # noqa: E501

        self._version_alias = version_alias

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AppVersionDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1AppVersionDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
