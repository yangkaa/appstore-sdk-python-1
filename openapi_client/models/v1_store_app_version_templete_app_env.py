# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: huangrh@goodrain.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1StoreAppVersionTempleteAppEnv(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attr_name': 'str',
        'attr_value': 'str',
        'is_change': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'attr_name': 'attr_name',
        'attr_value': 'attr_value',
        'is_change': 'is_change',
        'name': 'name'
    }

    def __init__(self, attr_name=None, attr_value=None, is_change=None, name=None, local_vars_configuration=None):  # noqa: E501
        """V1StoreAppVersionTempleteAppEnv - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attr_name = None
        self._attr_value = None
        self._is_change = None
        self._name = None
        self.discriminator = None

        self.attr_name = attr_name
        self.attr_value = attr_value
        self.is_change = is_change
        self.name = name

    @property
    def attr_name(self):
        """Gets the attr_name of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The attr_name of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: str
        """
        return self._attr_name

    @attr_name.setter
    def attr_name(self, attr_name):
        """Sets the attr_name of this V1StoreAppVersionTempleteAppEnv.


        :param attr_name: The attr_name of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type attr_name: str
        """
        if self.local_vars_configuration.client_side_validation and attr_name is None:  # noqa: E501
            raise ValueError("Invalid value for `attr_name`, must not be `None`")  # noqa: E501

        self._attr_name = attr_name

    @property
    def attr_value(self):
        """Gets the attr_value of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The attr_value of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: str
        """
        return self._attr_value

    @attr_value.setter
    def attr_value(self, attr_value):
        """Sets the attr_value of this V1StoreAppVersionTempleteAppEnv.


        :param attr_value: The attr_value of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type attr_value: str
        """
        if self.local_vars_configuration.client_side_validation and attr_value is None:  # noqa: E501
            raise ValueError("Invalid value for `attr_value`, must not be `None`")  # noqa: E501

        self._attr_value = attr_value

    @property
    def is_change(self):
        """Gets the is_change of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The is_change of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: bool
        """
        return self._is_change

    @is_change.setter
    def is_change(self, is_change):
        """Sets the is_change of this V1StoreAppVersionTempleteAppEnv.


        :param is_change: The is_change of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type is_change: bool
        """
        if self.local_vars_configuration.client_side_validation and is_change is None:  # noqa: E501
            raise ValueError("Invalid value for `is_change`, must not be `None`")  # noqa: E501

        self._is_change = is_change

    @property
    def name(self):
        """Gets the name of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The name of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1StoreAppVersionTempleteAppEnv.


        :param name: The name of this V1StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1StoreAppVersionTempleteAppEnv):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1StoreAppVersionTempleteAppEnv):
            return True

        return self.to_dict() != other.to_dict()
